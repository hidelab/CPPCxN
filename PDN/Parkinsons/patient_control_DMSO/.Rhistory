rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
//NumericMatrix::Column datcol = dat( _, 1);
//std::cout << datcol[0] << std::endl;
//NumericMatrix::Row tmp = dat(1, _);
//std::cout << tmp[0] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = m( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
std::cout << dat( _, m)[0] << std::endl;
std::cout << dat( _, m)[1] << std::endl;
std::cout << dat( _, m)[2] << std::endl;
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
std::cout << dat( _, m)[0] << std::endl;
std::cout << dat( _, m)[1] << std::endl;
std::cout << dat( _, m)[2] << std::endl;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
x_matrix <- matrix(1:9, nrow = 3, dimnames = list(c("gene1","gene2","gene3"), c("s1","s2","s3")))
x_gs <- c("gene1","gene3")
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
Rf_PrintValue(colnames(dat[0]));
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
setwd("~/GitHub/CPPCxN/PDN")
dir.create("1202")
dir.create(project_dir)
# Project files (change those lines of you are starting a new project)
project_dir <- "Parkinsons"
dir.create(project_dir)
dir.create(paste(project_dir, "/", project_folder, sep = ""))
project_folder <- "patient_control_DMSO"
dir.create(paste(project_dir, "/", project_folder, sep = ""))
?file,path
?file.path
file.path(project_dir)
dir.create(file.path(project_dir, project_folder), showWarnings = FALSE)
file.exists(project_dir)
if (!file.exists(project_dir)) dir.create(project_dir)
if (!file.exists(project_dir)) {
dir.create(project_dir, "/", project_folder, sep = "")
}
if (!file.exists(project_dir)) {
dir.create(paste(project_dir, "/", project_folder, sep = ""), sep = "")
}
if (!file.exists(project_dir)) {
dir.create(paste(project_dir, "/", project_folder, sep = ""))
}
if (!file.exists(project_dir)) {
dir.create(project_dir)
dir.create(paste(project_dir, "/", project_folder, sep = ""))
}
if (!file.exists(project_dir)) {
dir.create(project_dir)
dir.create(paste(project_dir, "/", project_folder, sep = ""))
}
if (!file.exists(project_dir)) {
dir.create(project_dir)
dir.create(paste(project_dir, "/", project_folder, sep = ""))
}
if (!file.exists(project_dir)) {
dir.create(project_dir)
dir.create(paste(project_dir, "/", project_folder, sep = ""))
}
if (!file.exists(project_dir)) {
dir.create(project_dir, showWarnings = FALSE)
dir.create(paste(project_dir, "/", project_folder, sep = ""), showWarnings = FALSE)
}
#### Loading resources ####
dataDir <- paste("/", project_dir, "/", project_folder, sep = "")
setwd(paste("/", project_dir, "/", project_folder, sep = ""))
paste("/", project_dir, "/", project_folder, sep = "")
setwd(paste("/", project_dir, "/", project_folder, "/", sep = ""))
setwd(paste(project_dir, "/", project_folder, "/", sep = ""))
dataDir <- paste("/", project_dir, "/", project_folder, sep = "")
library(readxl)
project_dir <- "Parkinsons"
project_folder <- "patient_control_DMSO"
pathwayDataFilename <- "pathway_Fibroblast_RNAseq_Patient_DMSO_vs_Control_DMSO_limma sigpathways 0.05p_1.2FC_modified.xls"
# Creating the project directory if needed(new project)
if (!file.exists(project_dir)) {
dir.create(project_dir, showWarnings = FALSE)
dir.create(paste(project_dir, "/", project_folder, sep = ""), showWarnings = FALSE)
}
setwd(paste(project_dir, "/", project_folder, "/", sep = ""))
# Output dir setup
dataDir <- paste("/", project_dir, "/", project_folder, sep = "")
# load data from file
# extract significant pathways based on cutoffs
pathwayData <- read_excel(pathwayDataFilename)
# load data from file
# extract significant pathways based on cutoffs
pathwayData <- read_excel(pathwayDataFilename)
setwd("~/GitHub/CPPCxN/PDN")
library(readxl)
######## Inputs #######
# Project files (change those lines of you are starting a new project)
project_dir <- "Parkinsons"
project_folder <- "patient_control_DMSO"
pathwayDataFilename <- "pathway_Fibroblast_RNAseq_Patient_DMSO_vs_Control_DMSO_limma sigpathways 0.05p_1.2FC_modified.xls"
#### Loading resources ####
# Creating the project directory if needed(new project)
if (!file.exists(project_dir)) {
dir.create(project_dir, showWarnings = FALSE)
dir.create(paste(project_dir, "/", project_folder, sep = ""), showWarnings = FALSE)
}
# load data from file
# extract significant pathways based on cutoffs
pathwayData <- read_excel(pathwayDataFilename)
setwd(paste(project_dir, "/", project_folder, "/", sep = ""))
# Output dir setup
dataDir <- paste("/", project_dir, "/", project_folder, sep = "")
View(pathwayData)
#### Already ordered but re-do just to check ####
pathwayData <- pathwayData[order(pathwayData$logFC, decreasing = T),]
pathwayData <- pathwayData[order(pathwayData$logFC, decreasing = T),]
#### NEEDS TO ADJUST FOR THE CASE THERE ARE LESS THAN 5 pathways
# Cluster A) target top 5 pathways
ClusterA <- head(pathwayData[,pathway_id],5)
# Cluster B) target top 10 pathways
ClusterB <- head(pathwayData$pathway_id,10)
# Cluster C) target bottom 5 pathways
ClusterC <- tail(pathwayData$pathway_id,5)
# Cluster D) target bottom 10 pathways
ClusterD <- tail(pathwayData$pathway_id,10)
print("ClusterA")
ClusterA
print("ClusterB")
ClusterB
print("ClusterC")
ClusterC
print("ClusterD")
ClusterD
