return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
x_matrix <- matrix(1:9, nrow = 3, dimnames = list(c("gene1","gene2","gene3"), c("s1","s2","s3")))
x_gs <- c("gene1","gene3")
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
Rf_PrintValue(colnames(dat[0]));
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
setwd("~/GitHub/CPPCxN/P-combiner")
# Aggregate results into a single data frame
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== Arguments ====
# command line arguments from submission (sharc) script
# 1 - genesets file
cmd_args <- commandArgs(trailingOnly = T)
# ==== INPUTS ====
m1 <- "pcxn_conc_base"
m2 <- "pcxn_conc_plus_10"
output_name <-"pcxn_conc_base_plus_10"
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
tmp1 <- readRDS(paste0(m1 ,"_part", k, ".RDS"))
tmp2 <- readRDS(paste0(m2 ,"_part", k, ".RDS"))
conc_tmp <- rbind(tmp1,tmp2)
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
# Aggregate results into a single data frame
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== Arguments ====
# command line arguments from submission (sharc) script
# 1 - genesets file
cmd_args <- commandArgs(trailingOnly = T)
# ==== INPUTS ====
inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
p-combine <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
}
pcxn_combine <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
}
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
}
p_combiner(c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),"pcxn_conc_base_plus_10_plus_20")
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
inputs <- inputs
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
}
p_combiner(c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),"pcxn_conc_base_plus_10_plus_20")
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
return;
}
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
rm(list = ls(all=TRUE))
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
return;
}
p_combiner(c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),"pcxn_conc_base_plus_10_plus_20")
p_combiner(c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),"pcxn_conc_base_plus_10_plus_20")
p_combiner(inputs = c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),output_name = "pcxn_conc_base_plus_10_plus_20")
ff <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
p_combiner(ff,output_name = "pcxn_conc_base_plus_10_plus_20")
p_combiner(ff,output_name = "pcxn_conc_base_plus_10_plus_20")
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
return;
}
p_combiner(inputs = c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),output_name = "pcxn_conc_base_plus_10_plus_20")
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
return 0;
}
p_combiner <- function (inputs,output_name) {
# We need estimates02 to be completed for both runs
options(stringsAsFactors = F)
# ==== example inputs ====
# inputs <- c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20")
# output_name <- "pcxn_conc_base_plus_10_plus_20"
# Check if all necessary files exists in this directory
for(i in inputs) {
tname1 <- paste(i,"_part1.RDS",sep = "")
tname2 <- paste(i,"_part2.RDS",sep = "")
if(!file_test("-f", tname1)) stop(paste(tname1, ": No such file found in this directory!",sep = ""))
if(!file_test("-f", tname2)) stop(paste(tname2, ": No such file found in this directory!",sep = ""))
}
# empty variable to store results
pcxn = c()
pb = txtProgressBar(min=0,max=2,initial=0,style=3)
for(k in 1:2){
# read each part of each
conc_tmp <- c()
for (m in inputs) {
tmp <- readRDS(paste0(m ,"_part", k, ".RDS"))
conc_tmp <- rbind(conc_tmp,tmp)
}
conc_tmp <- unique(conc_tmp)
pcxn = rbind(pcxn, conc_tmp)
setTxtProgressBar(pb,k)
}
close(pb)
# adjust p-values for multiple comparison
pcxn$p.Adjust = p.adjust(p = pcxn$p.value, method = "fdr")
# save results
saveRDS(pcxn, paste0(output_name,".RDS"))
}
p_combiner(inputs = c("pcxn_conc_base","pcxn_conc_plus_10","pcxn_conc_plus_20"),output_name = "pcxn_conc_base_plus_10_plus_20")
pcxn_conc_base_plus_10_plus_20 <- readRDS("C:/Users/UOS/Documents/GitHub/CPPCxN/P-combiner/pcxn_conc_base_plus_10_plus_20.RDS")
View(pcxn_conc_base_plus_10_plus_20)
