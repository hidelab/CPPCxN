// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
//NumericMatrix::Column datcol = dat( _, 1);
//std::cout << datcol[0] << std::endl;
//NumericMatrix::Row tmp = dat(1, _);
//std::cout << tmp[0] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = m( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
std::cout << dat( _, m)[0] << std::endl;
std::cout << dat( _, m)[1] << std::endl;
std::cout << dat( _, m)[2] << std::endl;
break;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
std::cout << dat( _, m)[0] << std::endl;
std::cout << dat( _, m)[1] << std::endl;
std::cout << dat( _, m)[2] << std::endl;
}
Rf_PrintValue(mat) ;
NumericMatrix::Column datcol = mat( _, 1);
std::cout << datcol[0] << std::endl;
std::cout << datcol[1] << std::endl;
std::cout << datcol[2] << std::endl;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
x_matrix <- matrix(1:9, nrow = 3, dimnames = list(c("gene1","gene2","gene3"), c("s1","s2","s3")))
x_gs <- c("gene1","gene3")
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
GetSummary_cpp(x_matrix,x_gs,1)
cppFunction("
#include <cstdio>
#include <algorithm>
#include <iostream>
#include <String.h>
NumericMatrix GetSummary_cpp(NumericMatrix dat, CharacterVector gs, int sum_fun){
// Function to calculate the summary statistic for the pathway
// Args.
// dat: genes by samples matrix
// gs: vector with the names of the genes in the gene set
// sum_fun: function to calculate the summary
// Returns
// A 1 by samples vector with the summary statistic for the pathway
// rownames(genes) of dat
CharacterVector dat_rownames = rownames(dat);
int rows = dat_rownames.size();
// colnames(samples) of dat
CharacterVector dat_colnames = colnames(dat);
int cols = dat_colnames.size();
// dat genes that are also in gs
CharacterVector dat_gs(gs.size());
int in_gs_counter = 0;
for (int j=0; j < rows; j++) {
for (int i=0; i < gs.size(); i++) {
// checking if matrix gene is in gs
if ((dat_rownames[j] == gs[i]) == 1) {
dat_gs[in_gs_counter] = dat_rownames[j];
in_gs_counter++;
break;
}
}
}
// pre-allocate result matrix
NumericMatrix mat(rows,in_gs_counter);
rownames(mat) = dat_rownames;
CharacterVector result_colnames;
// construct result matrix
for (int m=0; m < in_gs_counter; m++) {
mat(_,m) = dat( _, m);
}
//Rf_PrintValue(mat) ;
Rf_PrintValue(colnames(dat[0]));
// Non-empty input matrix
if (gs.size() > 1) {
// Case: colMeans
if(sum_fun == 1) {
//colMeans(dat[dat_gs,_]);
//colMeans()
return mat;
}
// Case: any other
else {
return mat;
}
}
return mat;
}
")
morph_pcxn_result <- function(pcxn_res) {
# Original PCxN's result
original_matrix <- readRDS(pcxn_res)
unique_pathways <- unique(c(original_matrix$Pathway.A,original_matrix$Pathway.B))
pathway_number <- length(unique_pathways)
rns <- unique_pathways
cns <- unique_pathways
square_matrix <- matrix(, pathway_number, pathway_number, dimnames = list(rns, cns))
for(row in 1:nrow(original_matrix)) {
tp1 <- original_matrix[row, 1]
tp2 <- original_matrix[row, 2]
square_matrix[tp1,tp2] <- original_matrix[row, 4]
square_matrix[tp2,tp1] <- original_matrix[row, 4]
}
}
setwd("~/GitHub/CPPCxN/P-converter")
morph_pcxn_result("original_PCxN_result.RDS")
morph_pcxn_result <- function(pcxn_res) {
# Original PCxN's result
original_matrix <- readRDS(pcxn_res)
unique_pathways <- unique(c(original_matrix$Pathway.A,original_matrix$Pathway.B))
pathway_number <- length(unique_pathways)
rns <- unique_pathways
cns <- unique_pathways
square_matrix <- matrix(, pathway_number, pathway_number, dimnames = list(rns, cns))
for(row in 1:nrow(original_matrix)) {
tp1 <- original_matrix[row, 1]
tp2 <- original_matrix[row, 2]
square_matrix[tp1,tp2] <- original_matrix[row, 4]
square_matrix[tp2,tp1] <- original_matrix[row, 4]
}
saveRDS(square_matrix, paste("square_", pcxn_res, sep = "") )
}
morph_pcxn_result("original_PCxN_result.RDS")
square_original_PCxN_result <- readRDS("~/GitHub/CPPCxN/P-converter/square_original_PCxN_result.RDS")
View(square_original_PCxN_result)
square_original_PCxN_result <- readRDS("~/GitHub/CPPCxN/P-converter/square_original_PCxN_result.RDS")
morph_pcxn_result <- function(pcxn_res) {
# Original PCxN's result
original_matrix <- readRDS(pcxn_res)
unique_pathways <- unique(c(original_matrix$Pathway.A,original_matrix$Pathway.B))
pathway_number <- length(unique_pathways)
rns <- unique_pathways
cns <- unique_pathways
square_matrix <- matrix(, pathway_number, pathway_number, dimnames = list(rns, cns))
for(row in 1:nrow(original_matrix)) {
tp1 <- original_matrix[row, 1]
tp2 <- original_matrix[row, 2]
square_matrix[tp1,tp2] <- original_matrix[row, 4]
square_matrix[tp2,tp1] <- original_matrix[row, 4]
}
diag(square_matrix) <- "1"
saveRDS(square_matrix, paste("square_", pcxn_res, sep = "") )
}
morph_pcxn_result("original_PCxN_result.RDS")
square_original_PCxN_result <- readRDS("~/GitHub/CPPCxN/P-converter/square_original_PCxN_result.RDS")
square_original_PCxN_result <- readRDS("~/GitHub/CPPCxN/P-converter/square_original_PCxN_result.RDS")
View(square_original_PCxN_result)
